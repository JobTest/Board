apply plugin: 'war'
apply plugin: "js"
apply plugin: "css"

def version = "1.13"

archivesBaseName = "board-client"

configurations {
    provided
}

buildscript {
    repositories {
        jcenter()
    }

    dependencies {
        classpath "com.eriwen:gradle-js-plugin:1.12.1"
        classpath "com.eriwen:gradle-css-plugin:1.11.1"
    }
}
apply plugin: "com.eriwen.gradle.js"

def listLibs = [
        "${projectDir}/src/main/webapp/lib/" + "jquery/jquery.js",
        "${projectDir}/src/main/webapp/lib/" + "jquery/jquery.appear.js",
        "${projectDir}/src/main/webapp/lib/" + "angular/1.3.11/angular.js",
        "${projectDir}/src/main/webapp/lib/" + "angular/1.3.11/angular-sanitize.js",
        "${projectDir}/src/main/webapp/lib/" + "angular/ng-table/ng-table.js",
        "${projectDir}/src/main/webapp/lib/" + "highcharts/4.1.5/highcharts.js",
        "${projectDir}/src/main/webapp/lib/" + "angular/highcharts/highcharts-ng.js",
        "${projectDir}/src/main/webapp/lib/" + "angular-ui/0.13.0/ui-bootstrap-tpls.js",
        "${projectDir}/src/main/webapp/lib/" + "angular-ui/0.2.8/angular-ui-router.js",
        "${projectDir}/src/main/webapp/lib/" + "moment/moment.js",
        "${projectDir}/src/main/webapp/lib/" + "menu/menu.js",
]

def listLibsMin = []
task initListLibsMin {
    listLibs.each { String str ->
        listLibsMin.add(str.replace(".js", ".min.js"))
    }
}

javascript.source {
    libs {
        js {
            srcDir "${projectDir}/src/main/webapp/lib"
            include "jquery/jquery.js",
                    "jquery/jquery.appear.js",
                    "angular/1.3.11/angular.js",
                    "angular/1.3.11/angular-sanitize.js",
                    "angular/ng-table/ng-table.js",
                    "highcharts/4.1.5/highcharts.js",
                    "angular/highcharts/highcharts-ng.js",
                    "angular-ui/0.13.0/ui-bootstrap-tpls.js",
                    "angular-ui/0.2.8/angular-ui-router.js",
                    "moment/moment.js",
                    "menu/menu.js"
        }
    }
    custom {
        js {
            srcDir "${projectDir}/src/main/webapp/scripts"
            exclude "*.min.js"
            exclude "*.template.js"
            exclude "**/*.template.js"
        }
    }
}

css.source {
    libs {
        css {
            srcDir "${projectDir}/src/main/webapp/lib"
            include "bootstrap-3.3.2/css/bootstrap.min.css"
            include "menu/menu.css"
        }
    }
    custom {
        css {
            srcDir "${projectDir}/src/main/webapp/styles"
            include "*.css"
            include "**/*.css"
        }
    }
}

task buildConfig << {
    println "--build config--\n"
    def frame = new File("${projectDir}/src/main/webapp/scripts/config/config.template.js").text
    frame = frame.replaceAll("@server", project.server)
    frame = frame.replaceAll("@dashboard", project.dashboard)
    new File("${projectDir}/src/main/webapp/scripts/config/config.js").write(frame)
}

task combineCustomJs(type: com.eriwen.gradle.js.tasks.CombineJsTask) {
    source = javascript.source.custom.js.files
    dest = file("${projectDir}/src/main/webapp/files/scripts.js")
}
combineCustomJs << {
    println "--combine custom js(work)--\n"
}

task minifyCustomJs(type: com.eriwen.gradle.js.tasks.MinifyJsTask) {
    source = combineCustomJs
    dest = file("${projectDir}/src/main/webapp/files/scripts.min.js")
    closure {
        warningLevel = 'QUIET'
        compilerOptions.defineReplacements = ['MY_DBUG_FLAG': false]
    }
}
minifyCustomJs << {
    println "--minify custom js(work)--\n"
}

task combineLibsJs(type: com.eriwen.gradle.js.tasks.CombineJsTask) {
    source = listLibsMin
    dest = file("${projectDir}/src/main/webapp/files/libs-scripts.js")
}
combineLibsJs << {
    println "--combine libs js(work)--\n"
}

task minifyLibsJs(type: com.eriwen.gradle.js.tasks.MinifyJsTask) {
    source = combineLibsJs
    dest = "${projectDir}/src/main/webapp/files/libs-scripts.min.js"
    closure {
        warningLevel = 'QUIET'
        compilerOptions.defineReplacements = ['MY_DBUG_FLAG': false]
    }
}
minifyLibsJs << {
    println "--minify libs js(work)--\n"
}

task combineCustomCss(type: com.eriwen.gradle.css.tasks.CombineCssTask) {
    source = css.source.custom.css.files
    dest = "${projectDir}/src/main/webapp/files/styles.css"
}
combineCustomCss << {
    println "--combine custom css(work)--\n"
}

task combineLibsCss(type: com.eriwen.gradle.css.tasks.CombineCssTask) {
    source = css.source.libs.css.files
    dest = "${projectDir}/src/main/webapp/files/libs-styles.css"
}
combineLibsCss << {
    println "--combine libs css(work)--\n"
}

task minifyCustomCss(type: com.eriwen.gradle.css.tasks.MinifyCssTask) {
    source = combineCustomCss
    dest = "${projectDir}/src/main/webapp/files/styles.min.css"
    yuicompressor {
        lineBreakPos = -1
    }
}
minifyCustomCss << {
    println "--minify custom css(work)--\n"
}

task minifyLibsCss(type: com.eriwen.gradle.css.tasks.MinifyCssTask) {
    source = combineLibsCss
    dest = "${projectDir}/src/main/webapp/files/libs-styles.min.css"
    yuicompressor {
        lineBreakPos = -1
    }
}
minifyLibsCss << {
    println "\n--minify libs css(work)--\n"
}

task includeFiles << {
    println "--include scripts and css(work)--"
    String libsJs = "<script src=\"files/libs-scripts.min.js\"></script>\n" +
            "<script src=\"files/scripts.min.js\"></script>"
    String libsCss = "<link rel=\"stylesheet\" href=\"files/libs-styles.css\"/>\n" +
            "<link rel=\"stylesheet\" href=\"files/styles.min.css\"/>"

    def tempIndexText = new File("${projectDir}/src/main/webapp/index.temp.html").text;
    tempIndexText = tempIndexText.replaceAll('@libs', libsJs)
    tempIndexText = tempIndexText.replaceAll('@css', libsCss)
    new File("${projectDir}/src/main/webapp/index.html").write(tempIndexText)
}

task includeDevFiles << {
    println "\n--include css(dev)--\n"
    def tempIndexText = new File("${projectDir}/src/main/webapp/index.temp.html").text;
    String tempCss = "<link rel=\"stylesheet\" href=\"@path\"/>"
    String libsCss = ""
    String tempJs = "<script src=\"@path\"></script>"
    String libsJs = ""

    for (file in css.source.libs.css.files + css.source.custom.css.files) {
        def path = file.path.replaceAll("${projectDir}/src/main/webapp/", "")
        libsCss += tempCss.replaceAll('@path', path) + '\n'
        println "  -" + file.path
    }

    println "\n--include scripts(dev)--\n"
    tempIndexText = tempIndexText.replaceAll('@css', libsCss)

    for (file in listLibs) {
        def path = file.replaceAll("${projectDir}/src/main/webapp/", "")
        libsJs += tempJs.replaceAll('@path', path) + '\n'
        println "  -" + file
    }
    for (file in javascript.source.custom.js.files) {
        def path = file.path.replaceAll("${projectDir}/src/main/webapp/", "")
        libsJs += tempJs.replaceAll('@path', path) + '\n'
        println "  -" + file.path
    }

    tempIndexText = tempIndexText.replaceAll('@libs', libsJs)
    new File("${projectDir}/src/main/webapp/index.html").write(tempIndexText)
}

task initTest(type: Exec) << {
    commandLine 'karma', 'start', './src/test/test/karma.conf.js', '--single-run true'
}

task dev << {
}
dev.dependsOn buildConfig
dev.dependsOn includeDevFiles

task work << {
}

work.dependsOn buildConfig
work.dependsOn minifyLibsJs
work.dependsOn minifyCustomJs
work.dependsOn minifyLibsCss
work.dependsOn minifyCustomCss
work.dependsOn includeFiles

clean {
    def tree = fileTree(dir: "${projectDir}/src/main/webapp/files")
    tree.exclude "fonts"
    tree.exclude "images"
    delete(tree)
}

war {
    exclude 'lib'
    exclude 'scripts'
    exclude 'styles'
}